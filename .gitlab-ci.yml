default:
  image: condaforge/linux-anvil-cos7-x86_64:latest

stages:
  - custom
  - lint
  - build
  - test
  - doc
  - deploy

# === Variables ===

variables:
  PACKAGE_VERSION: "0.1.14"

# === Configurations ===

.skip-custom-pipelines:
  except:
    variables:
      - $UPDATE_PAGES
      - $BUILD_IMAGE
      - $MIRROR_TO_GITHUB

.configure-conda:
  # Set conda envs and pkgs dirs
  script: &configure-conda
    - |
      cat <<EOF > ~/.condarc
      channel_priority: true
      channels:
        - pytorch
        - conda-forge
        - defaults
        - kimlab
        - ostrokach-forge
        - bioconda
        - salilab
      EOF
    - conda install -yq mamba

# === Lint ===

lint:
  stage: lint
  extends:
    - .skip-custom-pipelines
  before_script:
    - *configure-conda
  script:
    - mamba create -n lint -q "python=${PYTHON_VERSION}" isort toml flake8 mypy black
    - source activate lint
    - python -m isort -p ${CI_PROJECT_NAME} -c .
    - python -m flake8 src
    - python -m black --config pyproject.toml --check .
    # MyPy does not support namespace packages until this issue gets resolved:
    # https://github.com/python/mypy/issues/1645
    - python -m mypy src/${CI_PROJECT_NAME} || true

# === Build ===

build:
  stage: build
  before_script:
    - *configure-conda
  script:
    - mamba install -yq conda conda-build conda-verify conda-forge-pinning
    - cd "${CI_PROJECT_DIR}/devtools/conda"
    - >
      mamba build .
      --variant-config-files /opt/conda/conda_build_config.yaml
      --variants "{python: [$PYTHON_VERSION], numpy: [1.16], python_impl: [cpython]}"
      --no-test
      --output-folder "$CI_PROJECT_DIR/conda-bld"
  artifacts:
    paths:
      - conda-bld

# === Test ===

test:
  stage: test
  before_script:
    - *configure-conda
  script:
    # Create conda environment for testing
    - mamba create -n test -q -c file://${CI_PROJECT_DIR}/conda-bld --strict-channel-priority
      "python=${PYTHON_VERSION}" ${CI_PROJECT_NAME} pytest pytest-cov || true
    - source activate test
    # Run tests
    - PKG_INSTALL_DIR=$(python -c "import gitlab_versioned_pages; print(gitlab_versioned_pages.__path__[0])")
    - python -m pytest
      -c pyproject.toml
      --cov="${PKG_INSTALL_DIR}"
      --cov-config=pyproject.toml
      --color=yes
      "tests/"
    # Coverage
    - mkdir coverage
    - mv .coverage coverage/.coverage.all
  artifacts:
    paths:
      - coverage
  dependencies:
    - build

# === Document ===

# NB: Has to be called "docs" for the pages script to work.
docs:
  stage: doc
  before_script:
    - *configure-conda
  script:
    # Create conda environment for testing
    - conda update -yq conda
    - conda create -n test -q -c file://${CI_PROJECT_DIR}/conda-bld --strict-channel-priority
      "python=${PYTHON_VERSION}" ${CI_PROJECT_NAME} nbconvert ipython ipykernel pandoc || true
    - source activate test
    - pip install -q 'sphinx>=3.4' sphinx_rtd_theme msmb_theme nbsphinx coverage toml
      'recommonmark>=0.5' sphinx-markdown-tables
    # Build docs
    - sphinx-build ${CI_PROJECT_DIR}/docs public
    - ln -s . public/docs
    # Coverage
    - coverage combine coverage/
    - coverage report
    - coverage html
    - mv htmlcov public/
  coverage: /^TOTAL.* (\d+\%)/
  dependencies:
    - build
    - test
  artifacts:
    paths:
      - public
    when: always

# === Deploy ===

deploy:
  stage: deploy
  before_script:
    - *configure-conda
  script:
    - anaconda -t $ANACONDA_TOKEN upload $CI_PROJECT_DIR/*/*/*.tar.bz2 -u ostrokach-forge --no-progress --force
  only:
    - tags
  dependencies:
    - build

deploy-pypi:
  stage: deploy
  before_script:
    - *configure-conda
  script:
    - python -m pip install -q twine wheel
    - python setup.py sdist bdist_wheel
    - twine upload dist/*
  only:
    - tags

trigger-custom-pipelines:
  image:
    name: ubuntu:20.04
  stage: deploy
  before_script:
    - apt-get -y -qq update
    - apt-get -y -qq install curl jq
  script:
    - >
      BUILD_JOB_ID=$( \
        curl --globoff -sS --header "PRIVATE-TOKEN: ${GITLAB_CI_TOKEN}" \
          "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?scope[]=success" \
        | jq '.[] | select(.name == "build") | .id' \
      )
    # Update docker image
    - curl --request POST
      --form token="${CI_JOB_TOKEN}"
      --form ref=${CI_COMMIT_TAG}
      --form "variables[BUILD_IMAGE]=true"
      --form "variables[BUILD_JOB_ID]=${BUILD_JOB_ID}"
      https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
    # Update pages
    - curl --request POST
      --form token="${CI_JOB_TOKEN}"
      --form ref=${CI_COMMIT_TAG}
      --form "variables[UPDATE_PAGES]=true"
      https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
  only:
    - tags

# === Custom pipelines ===

pages:
  stage: custom
  before_script:
    - pip install gitlab_versioned_pages
  script:
    - mkdir -p ./public
    - python -m gitlab_versioned_pages
      --project-id ${CI_PROJECT_ID}
      --job-name docs
      --private-token ${CI_DOCS_TOKEN}
      --output-dir ./public
      --url "https://${CI_PROJECT_NAMESPACE}.gitlab.io/${CI_PROJECT_NAME}"
  artifacts:
    paths:
      - public
  only:
    variables:
      - $UPDATE_PAGES

.install-ssh-client:
  script: &install-ssh-client
    - "which ssh-agent || ( apt-get install -y -qq -o=Dpkg::Use-Pty=0 openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$KNOWN_HOSTS" >> ~/.ssh/known_hosts

.mirror-to-github:
  stage: deploy
  image:
    name: ubuntu:20.04
  before_script:
    # Install global dependencies
    - apt-get update -y -qq -o=Dpkg::Use-Pty=0
    - apt-get install -y -qq -o=Dpkg::Use-Pty=0 curl rsync gettext-base git git-lfs

    # Install ssh client
    - export SSH_PRIVATE_KEY="${GITHUB_SSH_PRIVATE_KEY}"
    - export KNOWN_HOSTS="${GITHUB_KNOWN_HOSTS}"
    - *install-ssh-client
  script:
    - git fetch --all
    - git remote add mirror git@github.com:ostrokach/protein-adjacency-net.git
    - git checkout master
    - git push mirror master --no-verify --force
    - git push mirror master --no-verify --tags --force
  needs: []
  # only:
  #   variables:
  #     - $MIRROR_TO_GITHUB
